{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.fnSetArrHandler && $setup.fnSetArrHandler(...args))\n  }, \"버튼\" + _toDisplayString($props.v.n), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","onClick","_cache","args","$setup","fnSetArrHandler","_toDisplayString","$props","v","n"],"sources":["C:\\Users\\thtwk\\OneDrive\\문서\\GitHub\\silver-river\\cozycoder\\vue-project\\vue-app\\src\\compBtns\\CompBtnsLi.vue"],"sourcesContent":["<template lang=\"\">\r\n    <div>\r\n        <button @click='fnSetArrHandler'>버튼{{v.n}}</button>\r\n    </div>\r\n</template>\r\n<script>\r\nexport default {\r\n    props: ['v'],\r\n\r\n    setup() {\r\n        const { refArr, setRefArr } = inject('provideArr')\r\n\r\n        const fnSetArrHandler=(n)=>{\r\n           const copyArr = [...refArr.value]\r\n           copyArr[n].className='active'\r\n        }\r\n        return {\r\n            fnSetArrHandler\r\n        }\r\n    },\r\n\r\n}\r\n</script>\r\n<style lang=\"\">\r\n    \r\n</style>"],"mappings":";;uBACIA,mBAAA,CAEM,cADFC,mBAAA,CAAmD;IAA1CC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,MAAA,CAAAC,eAAA,IAAAD,MAAA,CAAAC,eAAA,IAAAF,IAAA,CAAe;KAAE,IAAE,GAAAG,gBAAA,CAAEC,MAAA,CAAAC,CAAC,CAACC,CAAC,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}