{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from \"vue\";\nimport CompHeader from \"./components/CompHeader.vue\";\nimport CompAddForm from \"./components/CompAddForm.vue\";\nimport CompLi from \"./components/CompLi.vue\";\nexport default {\n  name: \"App\",\n  components: {\n    CompHeader,\n    CompAddForm,\n    CompLi\n  },\n  setup() {\n    //3에서 새로 나온거\n\n    const _todoArr = ref([]);\n    const _setTodoArr = emitData => {\n      //v를 적는 이유는 꺼내서 쓰겠다는 뜻. 자식이 보내준 타이틀 값을 꺼내서 써준다는것\n      _todoArr.value.push(emitData);\n    };\n    return {\n      _todoArr,\n      //자식이 프롭스를 받아서 고칠수없음 리액트와다름. 부모가 무조건 해결해야함. 사용자가입력한 값을 받아서 부모한테 줘야함. 근데 그값을 날리는 방법은 없고, 에밋이라는 이벤트를 전송하는 방법만 있음 컨텍스트가 필요하다! 부모가 나한테 쏘는건 프롭스 자식이 보내는건 컨텍스트\n      _setTodoArr\n    };\n  } //setup은 컴포지션이다. 컴포지션 문법이다. 컴포지션 함수이다. 변수를 만들거나 함수를 만들수있음\n};","map":{"version":3,"names":["ref","CompHeader","CompAddForm","CompLi","name","components","setup","_todoArr","_setTodoArr","emitData","value","push"],"sources":["C:\\Users\\thtwk\\OneDrive\\문서\\GitHub\\silver-river\\cozycoder\\vue-project\\todolist\\src\\App.vue"],"sourcesContent":["<template>\r\n  <CompHeader />\r\n\r\n  <CompAddForm\r\n    @emitAddListHandler=\"_setTodoArr\"\r\n  /><!-- 메일 받았을때 부모가 실행할 일, 제목을 배열에 추가하라고 보낸거잖아. 리액트로 치면 자식한테 받아서 셋을 하는거. -->\r\n  <!-- 에밋 보낼때 소괄호넣으면 절대안됨 파람을 넣으면 절대안되니까 그런게 아닐까 하는 선생님의 추측 절대 콜백함수 적으면 안됨 -->\r\n\r\n  <ul>\r\n    <CompLi v-for=\"(v, i) in _todoArr\" :key=\"v.id\" :data=\"v\" :idx=\"i\"/><!-- 앞에 v가 붙으면 안에 스크립트. 브이포는 키랑 무조건 같이 쓰기 -->\r\n  </ul>\r\n\r\n  <!-- {{ _todoArr }} -->\r\n</template>\r\n\r\n<script>\r\nimport { ref } from \"vue\";\r\nimport CompHeader from \"./components/CompHeader.vue\";\r\nimport CompAddForm from \"./components/CompAddForm.vue\";\r\nimport CompLi from \"./components/CompLi.vue\";\r\n\r\nexport default {\r\n  name: \"App\",\r\n  components: { CompHeader, CompAddForm, CompLi },\r\n\r\n  setup() {\r\n    //3에서 새로 나온거\r\n\r\n    const _todoArr = ref([]);\r\n    const _setTodoArr = (emitData) => {\r\n      //v를 적는 이유는 꺼내서 쓰겠다는 뜻. 자식이 보내준 타이틀 값을 꺼내서 써준다는것\r\n      _todoArr.value.push(emitData);\r\n    };\r\n\r\n    return {\r\n      _todoArr, //자식이 프롭스를 받아서 고칠수없음 리액트와다름. 부모가 무조건 해결해야함. 사용자가입력한 값을 받아서 부모한테 줘야함. 근데 그값을 날리는 방법은 없고, 에밋이라는 이벤트를 전송하는 방법만 있음 컨텍스트가 필요하다! 부모가 나한테 쏘는건 프롭스 자식이 보내는건 컨텍스트\r\n      _setTodoArr,\r\n    };\r\n  }, //setup은 컴포지션이다. 컴포지션 문법이다. 컴포지션 함수이다. 변수를 만들거나 함수를 만들수있음\r\n};\r\n</script>\r\n\r\n<style>\r\n/* @import \"./css/style.css\"; */\r\n</style>\r\n"],"mappings":";AAgBA,SAASA,GAAE,QAAS,KAAK;AACzB,OAAOC,UAAS,MAAO,6BAA6B;AACpD,OAAOC,WAAU,MAAO,8BAA8B;AACtD,OAAOC,MAAK,MAAO,yBAAyB;AAE5C,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IAAEJ,UAAU;IAAEC,WAAW;IAAEC;EAAO,CAAC;EAE/CG,KAAKA,CAAA,EAAG;IACN;;IAEA,MAAMC,QAAO,GAAIP,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMQ,WAAU,GAAKC,QAAQ,IAAK;MAChC;MACAF,QAAQ,CAACG,KAAK,CAACC,IAAI,CAACF,QAAQ,CAAC;IAC/B,CAAC;IAED,OAAO;MACLF,QAAQ;MAAE;MACVC;IACF,CAAC;EACH,CAAC,CAAE;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}