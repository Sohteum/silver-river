{"ast":null,"code":"import { ref } from 'vue';\nexport default {\n  setup() {\n    //컴포지션 문법//이 안에서 만들어야 스테잇 연결가능\n    const num = ref(0);\n    /* v-on */\n    const fnIncrease2 = () => {\n      num.value += 2;\n    };\n    const fnIncreaseN = increase => {\n      num.value += parseInt(increase);\n    };\n    const fnIncreaseValue = e => {\n      num.value += parseInt(e.target.value);\n    };\n    /* v-bind */\n    const isActive = ref(true); //반응형 : 변수가 바뀌면 화면이 알아서 바뀐다. 이걸 리액티브라고 함//css는 리스폰시브\n\n    return {\n      //템플릿에서 사용할려면 리턴을 해주어야함\n      num,\n      fnIncrease2,\n      fnIncreaseN,\n      fnIncreaseValue,\n      isActive\n    };\n  } //setup\n};","map":{"version":3,"names":["ref","setup","num","fnIncrease2","value","fnIncreaseN","increase","parseInt","fnIncreaseValue","e","target","isActive"],"sources":["C:\\Users\\thtwk\\OneDrive\\문서\\GitHub\\silver-river\\cozycoder\\vue-project\\10 0701\\커리큘럼\\00 vueapp\\src\\App.vue"],"sourcesContent":["<template>\r\n  <h1>state</h1>\r\n  <hr>\r\n  <h2>보간법(변수화면에뿌리기)</h2>\r\n  <p>num:{{ num }}</p>\r\n  <hr>\r\n  <h2>이벤트바인딩(v-on)</h2>\r\n  <button\r\n    v-on:click=\"num++\">1증가</button><!-- 브이다시, :콜론이 붙을때 여기는 더이상 ''아님 스크립트문법임, 여기서 바로 alert하면 에러남. 리턴한돼는 객체와 함수 변수 사용할 수 있음 얼랏할려면 함수만들어서 해야함-->\r\n  <button @click=\"fnIncrease2\">2증가</button><!--파라미터에 값이 없을때는 소괄호가 있으나 없으나 차이없음 빼도됨-->\r\n  <button @click=\"fnIncreaseN($event.target.value)\" value=\"3\">3증가</button>\r\n  <button @click=\"fnIncreaseN($event.target.value)\" value=\"4\">4증가</button>\r\n  <button @click=\"fnIncreaseValue($event)\" value=\"5\">5증가</button>\r\n  <hr>\r\n  <h2>v-bind</h2><!--  -->\r\n  <p v-bind:class=\"isActive&&'active'\">class이름을 v-bind로 연결했어요</p><!-- isActive가 트루라면 액티브를 넣어준다  -->\r\n  <p :class=\"isActive\">class이름을 v-bind로 연결했어요</p>\r\n  <button @click=\"isActive=!isActive\">토글</button><!-- 클릭하면 빨게졌다가 다시 돌아왓다가 하기 -->\r\n  <hr>\r\n  <h2>event-modifier(이벤트수식어)</h2>\r\n  <a @click.prevent=\"console.log('anchor를 클릭했어요')\" href=\"http://www.naver.com\">anchor클릭<!-- e.preventDefault -->\r\n  <!-- stop=stopPropergation -->\r\n  </a><!-- 폼에 많이 사용하는 방법 -->\r\n  <span @click.stop=\"console.log('span을 클릭했어요')\">span클릭</span>\r\n\r\n</template>\r\n    \r\n<script>\r\nimport { ref } from 'vue';\r\n\r\n\r\nexport default {\r\n  setup() {//컴포지션 문법//이 안에서 만들어야 스테잇 연결가능\r\n    const num = ref(0)\r\n    /* v-on */\r\n    const fnIncrease2 = () => {\r\n      num.value += 2\r\n    }\r\n    const fnIncreaseN = (increase) => {\r\n      num.value += parseInt(increase)\r\n    }\r\n    const fnIncreaseValue = (e) => {\r\n      num.value += parseInt(e.target.value)\r\n    }\r\n    /* v-bind */\r\n    const isActive = ref(true)//반응형 : 변수가 바뀌면 화면이 알아서 바뀐다. 이걸 리액티브라고 함//css는 리스폰시브\r\n\r\n\r\n\r\n    return {//템플릿에서 사용할려면 리턴을 해주어야함\r\n      num,\r\n      fnIncrease2,\r\n      fnIncreaseN,\r\n      fnIncreaseValue,\r\n      isActive,\r\n    }\r\n  }//setup\r\n}\r\n\r\n</script>\r\n\r\n<style>\r\nh2 {\r\n  font-size: 1rem;\r\n}\r\n\r\np.active {\r\n  color: red;\r\n}\r\n</style>"],"mappings":"AA4BA,SAASA,GAAE,QAAS,KAAK;AAGzB,eAAe;EACbC,KAAKA,CAAA,EAAG;IAAC;IACP,MAAMC,GAAE,GAAIF,GAAG,CAAC,CAAC;IACjB;IACA,MAAMG,WAAU,GAAIA,CAAA,KAAM;MACxBD,GAAG,CAACE,KAAI,IAAK;IACf;IACA,MAAMC,WAAU,GAAKC,QAAQ,IAAK;MAChCJ,GAAG,CAACE,KAAI,IAAKG,QAAQ,CAACD,QAAQ;IAChC;IACA,MAAME,eAAc,GAAKC,CAAC,IAAK;MAC7BP,GAAG,CAACE,KAAI,IAAKG,QAAQ,CAACE,CAAC,CAACC,MAAM,CAACN,KAAK;IACtC;IACA;IACA,MAAMO,QAAO,GAAIX,GAAG,CAAC,IAAI,CAAC;;IAI1B,OAAO;MAAC;MACNE,GAAG;MACHC,WAAW;MACXE,WAAW;MACXG,eAAe;MACfG;IACF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}