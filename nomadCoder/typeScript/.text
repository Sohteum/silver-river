1. 안정선. 코드에 버그, 런타임에러가 줄어든다
2. 자바스크립트는 유연한 언어.  
-숫자랑 불리언이랑 합쳤는데 한가지의 문자열이 되어버림.


3.타입스크립트는 타입을 정함
변수생성할때 그게 어떤타입인지 명시함. 컴파일러에 알려주는것
데이터와 변수의 타입을 명시적으로 정할수도 ㅇ있고 그냥 입력해도됨. 그럼 알아서 추론해줌

문자열에서 시작해서 문자열로 끝남. 갑자기 타입을 변경할 수 없음

톨론을 쓰고 타입을 작성하면됨. 하지만 알아서 추론할 수 이음

let a = string = 'g'

?의 사용 : 모든 플레이어가 age를 가지지는 않았을때 age에 물음표를 달아주면 오류가 안남

Alias
type Name = string;
type Player = {
  name:Name,
  age?:Age,
}

type Player = {
  name:string
  age?:number
}

const nico : Player = {
  name: "nico"
}

const lynn : Player = {
  name:"lynn",
  age:12
}

- 리턴값 타입 지정하기

-readonly타입 추가하기

-tuple 

- any사용하면 탈출이야 자주 쓰는건 안좋아 .

- 언노운, 보이드(아무것도 리턴하지않는함수, 아넹 아무것도 없음) , 네버(예외가 발생할때 절대 리턴하지않음. 오류를 발생시키고 리텅능 안함)

-placeholder: call signature를 요구하는대로 생성한다.
내가 작성한대로 배워서 적용해줄수있다는거같음. <_근데 여기 any같은걸 쓰면 안되겠지. 그럼 제한이 없으니까. 정확도가 떨어지겟지

-제네릭은 내가 요구한대로 시그니처를 생성할 수 있는도구이다.
그니가 하나하나 내가 정할수가없잖아. 그러니까 제네릭을 정해주고
내가 정하지 않고 쓰더라도 알아서 판단해~이렇게 하는거지. 
제네릭이 처음 사용되는 지점을 기반으로 알게된다. 


제네릭은 C#이나 Java와 같은 언어에서 재사용 가능한 컴포넌트를 만들기 위해 사용하는 기법입니다. 단일 타입이 아닌 다양한 타입에서 작동할 수 있는 컴포넌트를 생성할 수 있습니다.
(구체적인 타입을 지정하지 않고 다양한 인수와 리턴 값에 대한 타입을 처리할 수 있다.)
타입스크립트에서 제네릭을 통해 인터페이스, 함수 등의 재사용성을 높일 수 있습니다.

'제네릭은 선언 시점이 아니라 생성 시점에 타입을 명시하여 하나의 타입만이 아닌 다양한 타입을 사용할 수 있도록 하는 기법이다.'

자바스크립트처럼 여러 타입을 받을수 있다. 
하지만 자바스크립트는 any타입이 설정되어 해당 변수가 number타입인 경우에 touppercase같이 스트링에만 사용되는 function을 사용할 경우 
컴파일 과정에서 문제없이 진행되고 런타임 과정에서 에러가 뜨는 상황이 발생한다.

하지만 타입스크립트에서 제네릭을 사용하게되면 일반 자바스크립트처럼 자동 타입 할당이 되고 소스 작성 과정중에 
타입스크립이 해당 변수가 number타입인걸 알게되고 touppercase같이 스트링 전용 function이 사용이 불가능하다. 
에러가 뜨게되서 런타임 과정중에 에러가 나지 않도록 막아준다.