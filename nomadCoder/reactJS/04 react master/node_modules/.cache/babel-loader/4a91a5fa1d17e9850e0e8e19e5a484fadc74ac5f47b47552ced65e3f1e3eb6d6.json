{"ast":null,"code":"var _jsxFileName = \"D:\\\\YongSohtEum\\\\pwa_class\\\\05react\\\\react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport ComModal from \"./components/ComModal\";\nimport CompSum from \"./components/CompSum\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet arrComp = [];\nfor (let i = 0; i < 5; i++) {\n  arrComp.push(i); //[0,1,2,3,4]\n}\n\nfunction App() {\n  _s();\n  const [_pointArr, _setPointArr] = useState(new Array(5).fill('')); //길이가 4인 배열을 만든것.속도가 느린 명령어//원래 이게더빨라[,,,,]\n  const [_arrComp, _setArrComp] = useState(arrComp);\n  const [_showModal, _setShowModal] = useState(false);\n  const fnModalHandler = () => {\n    _setShowModal(true);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uB354\\uD558\\uAE30\\uBB38\\uC81C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), _arrComp.map((v, idx) => {\n      //배열로 출력하는경우에는 key(키값,유니크한이름)라는 프롭스을 꼭 쓰래, i는 원래 쓰면 안돼\n      return /*#__PURE__*/_jsxDEV(CompSum, {\n        idx: idx,\n        _setPointArr: _setPointArr,\n        _pointArr: _pointArr\n      }, v, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 18\n      }, this); //배열은 둘다 가져와야 됨\n    })\n    /* 변수만 적어 문법은 못적어. 최종결과가 변수 한개, 배열은 한개니까 쓸수있어 */, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fnModalHandler,\n      children: \"\\uC810\\uC218\\uD655\\uC778\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), _showModal === true && /*#__PURE__*/_jsxDEV(ComModal, {\n      _pointArr: _pointArr,\n      _setShowModal: _setShowModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"5qbW9fiBgDb5Nm1UGBPgz43XqTg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","ComModal","CompSum","jsxDEV","_jsxDEV","Fragment","_Fragment","arrComp","i","push","App","_s","_pointArr","_setPointArr","Array","fill","_arrComp","_setArrComp","_showModal","_setShowModal","fnModalHandler","children","fileName","_jsxFileName","lineNumber","columnNumber","map","v","idx","onClick","_c","$RefreshReg$"],"sources":["D:/YongSohtEum/pwa_class/05react/react-app/src/App.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport ComModal from \"./components/ComModal\";\r\nimport CompSum from \"./components/CompSum\";\r\n\r\nlet arrComp = []\r\nfor (let i = 0; i < 5; i++) {\r\n  arrComp.push(i) //[0,1,2,3,4]\r\n}\r\n\r\nfunction App() {\r\n\r\n  const [_pointArr, _setPointArr] = useState(new Array(5).fill(''))//길이가 4인 배열을 만든것.속도가 느린 명령어//원래 이게더빨라[,,,,]\r\n  const [_arrComp, _setArrComp] = useState(arrComp)\r\n  const [_showModal, _setShowModal] = useState(false)\r\n\r\n  const fnModalHandler = () => {\r\n    _setShowModal(true)\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <h1>더하기문제</h1>\r\n      <hr />\r\n      {\r\n        _arrComp.map((v, idx) => { //배열로 출력하는경우에는 key(키값,유니크한이름)라는 프롭스을 꼭 쓰래, i는 원래 쓰면 안돼\r\n          return <CompSum key={v} idx={idx} _setPointArr={_setPointArr} _pointArr={_pointArr}/>//배열은 둘다 가져와야 됨\r\n        })\r\n        /* 변수만 적어 문법은 못적어. 최종결과가 변수 한개, 배열은 한개니까 쓸수있어 */\r\n      }\r\n      {/* <CompSum _setPoint={_setPoint}/> 반복되는 컴포넌트는 적어주지 않고 반복문을 쓴다 */}\r\n\r\n      <button onClick={fnModalHandler}>점수확인</button>\r\n      {(_showModal === true) && <ComModal _pointArr={_pointArr} _setShowModal={_setShowModal}/>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,OAAO,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE3C,IAAIC,OAAO,GAAG,EAAE;AAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;EAC1BD,OAAO,CAACE,IAAI,CAACD,CAAC,CAAC,EAAC;AAClB;;AAEA,SAASE,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAIc,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;EACjE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAACO,OAAO,CAAC;EACjD,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMoB,cAAc,GAAGA,CAAA,KAAM;IAC3BD,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAGD,oBACEf,OAAA,CAAAE,SAAA;IAAAe,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACdrB,OAAA;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,EAEJT,QAAQ,CAACU,GAAG,CAAC,CAACC,CAAC,EAAEC,GAAG,KAAK;MAAE;MACzB,oBAAOxB,OAAA,CAACF,OAAO;QAAS0B,GAAG,EAAEA,GAAI;QAACf,YAAY,EAAEA,YAAa;QAACD,SAAS,EAAEA;MAAU,GAA9De,CAAC;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAA+D;IACvF,CAAC;IACD,+DAIFrB,OAAA;MAAQyB,OAAO,EAAET,cAAe;MAAAC,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,EAC5CP,UAAU,KAAK,IAAI,iBAAKd,OAAA,CAACH,QAAQ;MAACW,SAAS,EAAEA,SAAU;MAACO,aAAa,EAAEA;IAAc;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE;EAAA,gBACxF;AAEP;AAACd,EAAA,CA3BQD,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AA6BZ,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}