{"ast":null,"code":"var _jsxFileName = \"D:\\\\YongSohtEum\\\\pwa_class\\\\05react\\\\react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport ComModal from \"./components/ComModal\";\nimport CompSum from \"./components/CompSum\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [_point, _setPoint] = useState(0);\n  const [_arrComp, _setArrComp] = useState(['', '', '']);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uB354\\uD558\\uAE30\\uBB38\\uC81C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(ComModal, {\n      _point: _point\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"0bqjJqa0GfUrjgRSogTrDPW/vYk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","ComModal","CompSum","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","_point","_setPoint","_arrComp","_setArrComp","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/YongSohtEum/pwa_class/05react/react-app/src/App.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport ComModal from \"./components/ComModal\";\r\nimport CompSum from \"./components/CompSum\";\r\n\r\nfunction App() {\r\n\r\nconst [_point, _setPoint] = useState(0)\r\nconst [_arrComp, _setArrComp] = useState(['','',''])\r\n\r\n  return (\r\n    <>\r\n    <h1>더하기문제</h1>\r\n    <hr />\r\n    {\r\n\r\n      /* 변수만 적어 문법은 못적어. 최종결과가 변수 한개, 배열은 한개니까 쓸수있어 */\r\n    }\r\n    {/* <CompSum _setPoint={_setPoint}/> 반복되는 컴포넌트는 적어주지 않고 반복문을 쓴다 */}\r\n\r\n    <ComModal _point={_point} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,OAAO,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE3C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEf,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC;EAElD,oBACEI,OAAA,CAAAE,SAAA;IAAAO,QAAA,gBACAT,OAAA;MAAAS,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACdb,OAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eAONb,OAAA,CAACH,QAAQ;MAACQ,MAAM,EAAEA;IAAO;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA,gBACzB;AAEP;AAACT,EAAA,CAlBQD,GAAG;AAAAW,EAAA,GAAHX,GAAG;AAoBZ,eAAeA,GAAG;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}