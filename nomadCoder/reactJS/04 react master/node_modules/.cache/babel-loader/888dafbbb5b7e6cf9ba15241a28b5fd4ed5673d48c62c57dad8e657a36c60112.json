{"ast":null,"code":"var _jsxFileName = \"D:\\\\YongSohtEum\\\\pwa_class\\\\05react\\\\react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction fnGetDDay(dday, now) {\n  let dDayTimeStamp = dday;\n  let timeStamp = now;\n  let diff = dday - now; //남은 시간을 밀리세컨드로 환산(1000분의 1초)\n  let remainfSec = parseInt(diff / 1000); //남은시간을  초로 환산\n  let date = Math.floor(remainfSec / (24 * 60 * 60)); //몇일 남았는지 환산\n  remainfSec = remainfSec % (24 * 60 * 60); //남은 시간(일차 빼고)\n  let hour = Math.floor(remainfSec / (60 * 60));\n\n  //60분이 1시간이니까 3600초, 소수점이 나오니까 floor로 소수점을 내려버림\n}\n\nfunction App() {\n  _s();\n  // const day = new Date()\n  // day.getTime()\n  let timeStamp = Date.now(); //1000곱한 시간이 지금까지 흐른 초, 실시간으로 구해야함(업데이트되어야함, 그래서 셋인터벌)\n  //내가 만약 미래 특정시간(바뀌지 않는 시간)을 구하고 싶으면 미래시간 - 지금시간을 빼면 됨.\n  const dDayTimeStamp = new Date(2023, 4, 26).getTime(); //이렇게 만들면 현재 날짜 아니면 안에 날짜를 넣어줘야 디데이가 됨\n  const [_hour, _setHour] = useState();\n  const [_min, _setMin] = useState();\n  const [_sec, _setSec] = useState();\n  fnGetDDay(dDayTimeStamp, timeStamp);\n  useEffect(() => {\n    let intervalID = setInterval(() => {\n      timeStamp = Date.now();\n      // console.log(timeStamp);\n    }, 1000); //항상 습관적으로 클리어 할것\n    return () => {\n      clearInterval(intervalID);\n    };\n  }, []);\n  // console.log(timeStamp);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"dDay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [_hour, \":\", _min, \":\", _sec]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"W3sOmovwWT7OwmCjy/kBL62VHBI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","fnGetDDay","dday","now","dDayTimeStamp","timeStamp","diff","remainfSec","parseInt","date","Math","floor","hour","App","_s","Date","getTime","_hour","_setHour","_min","_setMin","_sec","_setSec","intervalID","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/YongSohtEum/pwa_class/05react/react-app/src/App.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction fnGetDDay(dday, now) {\r\n  let dDayTimeStamp = dday\r\n  let timeStamp = now\r\n  let diff = dday - now//남은 시간을 밀리세컨드로 환산(1000분의 1초)\r\n  let remainfSec = parseInt(diff / 1000) //남은시간을  초로 환산\r\n  let date = Math.floor(remainfSec / (24 * 60 * 60)) //몇일 남았는지 환산\r\n  remainfSec = remainfSec % (24 * 60 * 60) //남은 시간(일차 빼고)\r\n  let hour = Math.floor(remainfSec/(60*60))\r\n\r\n//60분이 1시간이니까 3600초, 소수점이 나오니까 floor로 소수점을 내려버림\r\n}\r\nfunction App() {\r\n\r\n  // const day = new Date()\r\n  // day.getTime()\r\n  let timeStamp = Date.now()//1000곱한 시간이 지금까지 흐른 초, 실시간으로 구해야함(업데이트되어야함, 그래서 셋인터벌)\r\n  //내가 만약 미래 특정시간(바뀌지 않는 시간)을 구하고 싶으면 미래시간 - 지금시간을 빼면 됨.\r\n  const dDayTimeStamp = new Date(2023, 4, 26).getTime() //이렇게 만들면 현재 날짜 아니면 안에 날짜를 넣어줘야 디데이가 됨\r\n  const [_hour, _setHour] = useState()\r\n  const [_min, _setMin] = useState()\r\n  const [_sec, _setSec] = useState()\r\n\r\n  fnGetDDay(dDayTimeStamp, timeStamp)\r\n\r\n\r\n  useEffect(() => {\r\n    let intervalID = setInterval(() => {\r\n      timeStamp = Date.now()\r\n      // console.log(timeStamp);\r\n    }, 1000)//항상 습관적으로 클리어 할것\r\n    return (() => {\r\n      clearInterval(intervalID)\r\n    })\r\n  }, [])\r\n  // console.log(timeStamp);\r\n  return (\r\n    <>\r\n      <h1>dDay</h1>\r\n      <p>{_hour}:{_min}:{_sec}</p>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElC,SAASC,SAASA,CAACC,IAAI,EAAEC,GAAG,EAAE;EAC5B,IAAIC,aAAa,GAAGF,IAAI;EACxB,IAAIG,SAAS,GAAGF,GAAG;EACnB,IAAIG,IAAI,GAAGJ,IAAI,GAAGC,GAAG;EACrB,IAAII,UAAU,GAAGC,QAAQ,CAACF,IAAI,GAAG,IAAI,CAAC,EAAC;EACvC,IAAIG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,UAAU,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,EAAC;EACnDA,UAAU,GAAGA,UAAU,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAC;EACzC,IAAIK,IAAI,GAAGF,IAAI,CAACC,KAAK,CAACJ,UAAU,IAAE,EAAE,GAAC,EAAE,CAAC,CAAC;;EAE3C;AACA;;AACA,SAASM,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb;EACA;EACA,IAAIT,SAAS,GAAGU,IAAI,CAACZ,GAAG,EAAE;EAC1B;EACA,MAAMC,aAAa,GAAG,IAAIW,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAACC,OAAO,EAAE,EAAC;EACtD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,EAAE;EACpC,MAAM,CAACwB,IAAI,EAAEC,OAAO,CAAC,GAAGzB,QAAQ,EAAE;EAClC,MAAM,CAAC0B,IAAI,EAAEC,OAAO,CAAC,GAAG3B,QAAQ,EAAE;EAElCM,SAAS,CAACG,aAAa,EAAEC,SAAS,CAAC;EAGnCT,SAAS,CAAC,MAAM;IACd,IAAI2B,UAAU,GAAGC,WAAW,CAAC,MAAM;MACjCnB,SAAS,GAAGU,IAAI,CAACZ,GAAG,EAAE;MACtB;IACF,CAAC,EAAE,IAAI,CAAC;IACR,OAAQ,MAAM;MACZsB,aAAa,CAACF,UAAU,CAAC;IAC3B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN;EACA,oBACEzB,OAAA,CAAAE,SAAA;IAAA0B,QAAA,gBACE5B,OAAA;MAAA4B,QAAA,EAAI;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACbhC,OAAA;MAAA4B,QAAA,GAAIT,KAAK,EAAC,GAAC,EAACE,IAAI,EAAC,GAAC,EAACE,IAAI;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK;EAAA,gBAC3B;AAEP;AAAChB,EAAA,CA9BQD,GAAG;AAAAkB,EAAA,GAAHlB,GAAG;AAgCZ,eAAeA,GAAG;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}