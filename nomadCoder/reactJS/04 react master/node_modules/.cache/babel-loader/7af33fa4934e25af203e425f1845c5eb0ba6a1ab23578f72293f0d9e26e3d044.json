{"ast":null,"code":"var _jsxFileName = \"D:\\\\YongSohtEum\\\\pwa_class\\\\05react\\\\react-app\\\\src\\\\components\\\\CompUl.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport CompLi from './CompLi';\nimport { AppContext } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fnGetRandomList = () => Math.floor(Math.random() * 10);\nconst CompUl = () => {\n  _s();\n  const [_listArr, _setListArr] = useState(fnGetRandomList());\n  const {\n    _reset\n  } = useContext(AppContext);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: [\"   \", listArr.map((v, i) => /*#__PURE__*/_jsxDEV(CompLi, {\n      i: i\n    }, v, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 31\n    }, this))\n    //중괄호는 스크립트문법. 근데 키는 다시 jsx문법. 중괄호 안에서 v를 그냥 쓰면 안된다. 보간법으로 받아야 함 가상돔 태그적을때 변수 호출할때는 무조건 중괄호\n    ]\n  }, _reset, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_s(CompUl, \"cJL86rglXGFUNPSvtUmXffCTAuc=\");\n_c = CompUl;\nexport default CompUl;\nvar _c;\n$RefreshReg$(_c, \"CompUl\");","map":{"version":3,"names":["React","useContext","useState","CompLi","AppContext","jsxDEV","_jsxDEV","fnGetRandomList","Math","floor","random","CompUl","_s","_listArr","_setListArr","_reset","children","listArr","map","v","i","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/YongSohtEum/pwa_class/05react/react-app/src/components/CompUl.jsx"],"sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport CompLi from './CompLi';\r\nimport { AppContext } from '../App';\r\n\r\nconst fnGetRandomList = () => Math.floor(Math.random() * 10)\r\n\r\nconst CompUl = () => {\r\n\r\n  const [_listArr, _setListArr] = useState(fnGetRandomList())\r\n\r\n  const { _reset } = useContext(AppContext)\r\n  return (\r\n    <ul key={_reset}>   {/* 키값이 바뀌면 리렌더링됨. */}\r\n\r\n      {\r\n        listArr.map((v, i) => <CompLi key={v} i={i} />)\r\n        //중괄호는 스크립트문법. 근데 키는 다시 jsx문법. 중괄호 안에서 v를 그냥 쓰면 안된다. 보간법으로 받아야 함 가상돔 태그적을때 변수 호출할때는 무조건 중괄호\r\n\r\n      }\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default CompUl;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AACnD,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,UAAU,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,eAAe,GAAGA,CAAA,KAAMC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,EAAE,CAAC;AAE5D,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAACK,eAAe,EAAE,CAAC;EAE3D,MAAM;IAAEQ;EAAO,CAAC,GAAGd,UAAU,CAACG,UAAU,CAAC;EACzC,oBACEE,OAAA;IAAAU,QAAA,GAAiB,KAAG,EAGhBC,OAAO,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,kBAAKd,OAAA,CAACH,MAAM;MAASiB,CAAC,EAAEA;IAAE,GAARD,CAAC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAU;IAC9C;IAAA;EAAA,GAJKT,MAAM;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAOV;AAET,CAAC;AAACZ,EAAA,CAfID,MAAM;AAAAc,EAAA,GAANd,MAAM;AAiBZ,eAAeA,MAAM;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}