{"ast":null,"code":"var _jsxFileName = \"D:\\\\YongSohtEum\\\\pwa_class\\\\05react\\\\react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport ComModal from \"./components/ComModal\";\nimport CompSum from \"./components/CompSum\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet arrComp = [];\nfor (let i = 0; i < 5; i++) {\n  arrComp.push(i); //[0,1,2,3,4]\n}\n\nfunction App() {\n  _s();\n  const [_point, _setPoint] = useState(0);\n  const [_arrComp, _setArrComp] = useState(arrComp);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uB354\\uD558\\uAE30\\uBB38\\uC81C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), _arrComp.map(v => {\n      //배열로 출력하는경우에는 key(키값,유니크한이름)라는 프롭스을 꼭 쓰래, i는 원래 쓰면 안돼\n      return /*#__PURE__*/_jsxDEV(CompSum, {\n        _setPoint: _setPoint\n      }, v, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 18\n      }, this);\n    })\n    /* 변수만 적어 문법은 못적어. 최종결과가 변수 한개, 배열은 한개니까 쓸수있어 */, /*#__PURE__*/_jsxDEV(ComModal, {\n      _point: _point\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"CCArCP6pdAS8fhtNIIKczcjwU2c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","ComModal","CompSum","jsxDEV","_jsxDEV","Fragment","_Fragment","arrComp","i","push","App","_s","_point","_setPoint","_arrComp","_setArrComp","children","fileName","_jsxFileName","lineNumber","columnNumber","map","v","_c","$RefreshReg$"],"sources":["D:/YongSohtEum/pwa_class/05react/react-app/src/App.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport ComModal from \"./components/ComModal\";\r\nimport CompSum from \"./components/CompSum\";\r\n\r\n let arrComp = []\r\nfor(let i =0; i<5; i++){\r\n  arrComp.push(i) //[0,1,2,3,4]\r\n}\r\n\r\nfunction App() {\r\n\r\n  const [_point, _setPoint] = useState(0)\r\n  const [_arrComp, _setArrComp] = useState(arrComp)\r\n\r\n  return (\r\n    <>\r\n      <h1>더하기문제</h1>\r\n      <hr />\r\n      {\r\n        _arrComp.map((v) => { //배열로 출력하는경우에는 key(키값,유니크한이름)라는 프롭스을 꼭 쓰래, i는 원래 쓰면 안돼\r\n          return <CompSum key={v} _setPoint={_setPoint}/>\r\n        })\r\n        /* 변수만 적어 문법은 못적어. 최종결과가 변수 한개, 배열은 한개니까 쓸수있어 */\r\n      }\r\n      {/* <CompSum _setPoint={_setPoint}/> 반복되는 컴포넌트는 적어주지 않고 반복문을 쓴다 */}\r\n\r\n      <ComModal _point={_point} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,OAAO,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1C,IAAIC,OAAO,GAAG,EAAE;AACjB,KAAI,IAAIC,CAAC,GAAE,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAEA,CAAC,EAAE,EAAC;EACrBD,OAAO,CAACE,IAAI,CAACD,CAAC,CAAC,EAAC;AAClB;;AAEA,SAASE,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAACO,OAAO,CAAC;EAEjD,oBACEH,OAAA,CAAAE,SAAA;IAAAU,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACdhB,OAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,EAEJN,QAAQ,CAACO,GAAG,CAAEC,CAAC,IAAK;MAAE;MACpB,oBAAOlB,OAAA,CAACF,OAAO;QAASW,SAAS,EAAEA;MAAU,GAAxBS,CAAC;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAyB;IACjD,CAAC;IACD,+DAIFhB,OAAA,CAACH,QAAQ;MAACW,MAAM,EAAEA;IAAO;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA,gBAC3B;AAEP;AAACT,EAAA,CApBQD,GAAG;AAAAa,EAAA,GAAHb,GAAG;AAsBZ,eAAeA,GAAG;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}