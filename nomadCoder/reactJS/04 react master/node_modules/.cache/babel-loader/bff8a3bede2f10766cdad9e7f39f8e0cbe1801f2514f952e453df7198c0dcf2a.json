{"ast":null,"code":"var _jsxFileName = \"D:\\\\YongSohtEum\\\\pwa_class\\\\05react\\\\react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport CompTitle from \"./CompTitle\";\nimport CompOutput from \"./CompOutput\";\nimport CompBtn from \"./CompBtn\";\nimport CompInterval from \"./CompInterval\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconsole.log(`app outside`);\nfunction App() {\n  _s();\n  console.log(`app inside  업데이트 시작`);\n  const [_n, _setN] = useState(0); //n이 변경이 되면 app은 여기서부터 새로 그리는것. 바깥쪽을 새로그리지는 않는다.그래서 로그를 찍어보면 처음에는 둘다나오는데 클릭하면 사용하는애인 앱인 inside만 나옴. 즉 스테잇이 변경되면 랜더링이 일어난다. 인사이드만, 아웃사이드는 안일어나\n  //콘솔로그로 값을 알아보는건 좋은 방법은 아님\n  // const [_num, _setNum] = useState(1) 여기서 이거 안씀\n  const [_show, _setShow] = useState(true);\n  useEffect(() => {\n    console.log(`app inside  업데이트 완료`); // 가상돔이 만들어지는 순간\n    document.querySelector('.btn').addEventListener(`click`, e => {\n      alert('tt'); //업데이트 될때마다 alert를 하라는 의미. 그래서 버튼을 눌러서 숫자를 늘리면 그 숫자만큼 경고창이 계속 나옴\n    });\n  });\n\n  useEffect(() => {\n    //디펜던시유즈이펙트:최초업데이트시 실행되는 코드\n    document.querySelector('.btn').addEventListener(`click`, e => {\n      // alert('tt')\n    });\n    setInterval(function () {\n      //여기서 이거 안씀\n      _setNum(prev => prev + 1);\n    }, 1000);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CompTitle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      children: \"useEffect event binding\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CompOutput, {\n      _n: _n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CompBtn, {\n      _setN: _setN\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), _show && /*#__PURE__*/_jsxDEV(CompInterval, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"3/aTS3gIkPKDDE+RnuhBRETh44o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","CompTitle","CompOutput","CompBtn","CompInterval","jsxDEV","_jsxDEV","Fragment","_Fragment","console","log","App","_s","_n","_setN","_show","_setShow","document","querySelector","addEventListener","e","alert","setInterval","_setNum","prev","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["D:/YongSohtEum/pwa_class/05react/react-app/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport CompTitle from \"./CompTitle\";\r\nimport CompOutput from \"./CompOutput\";\r\nimport CompBtn from \"./CompBtn\";\r\nimport CompInterval from \"./CompInterval\";\r\n\r\nconsole.log(`app outside`);\r\n\r\nfunction App() {\r\n\r\n  console.log(`app inside  업데이트 시작`);\r\n\r\n  const [_n, _setN] = useState(0)//n이 변경이 되면 app은 여기서부터 새로 그리는것. 바깥쪽을 새로그리지는 않는다.그래서 로그를 찍어보면 처음에는 둘다나오는데 클릭하면 사용하는애인 앱인 inside만 나옴. 즉 스테잇이 변경되면 랜더링이 일어난다. 인사이드만, 아웃사이드는 안일어나\r\n  //콘솔로그로 값을 알아보는건 좋은 방법은 아님\r\n  // const [_num, _setNum] = useState(1) 여기서 이거 안씀\r\n  const [_show, _setShow] = useState(true)\r\n\r\n  useEffect(() => {\r\n    console.log(`app inside  업데이트 완료`);// 가상돔이 만들어지는 순간\r\n    document.querySelector('.btn').addEventListener(`click`, e => {\r\n      alert('tt') //업데이트 될때마다 alert를 하라는 의미. 그래서 버튼을 눌러서 숫자를 늘리면 그 숫자만큼 경고창이 계속 나옴\r\n    })\r\n  })\r\n\r\n  useEffect(() => {  //디펜던시유즈이펙트:최초업데이트시 실행되는 코드\r\n    document.querySelector('.btn').addEventListener(`click`, e => {\r\n      // alert('tt')\r\n    })\r\n    setInterval(function () { //여기서 이거 안씀\r\n      _setNum(prev => prev + 1)\r\n    }, 1000)\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <CompTitle />\r\n      <button className=\"btn\">useEffect event binding</button>\r\n      <hr />\r\n      <CompOutput _n={_n} />\r\n      <CompBtn _setN={_setN} />\r\n      <hr />\r\n      {_show && <CompInterval />}\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1CC,OAAO,CAACC,GAAG,CAAE,aAAY,CAAC;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEbH,OAAO,CAACC,GAAG,CAAE,qBAAoB,CAAC;EAElC,MAAM,CAACG,EAAE,EAAEC,KAAK,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EAC/B;EACA;EACA,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACdU,OAAO,CAACC,GAAG,CAAE,qBAAoB,CAAC,CAAC;IACnCO,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC,CAACC,gBAAgB,CAAE,OAAM,EAAEC,CAAC,IAAI;MAC5DC,KAAK,CAAC,IAAI,CAAC,EAAC;IACd,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEFtB,SAAS,CAAC,MAAM;IAAG;IACjBkB,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC,CAACC,gBAAgB,CAAE,OAAM,EAAEC,CAAC,IAAI;MAC5D;IAAA,CACD,CAAC;IACFE,WAAW,CAAC,YAAY;MAAE;MACxBC,OAAO,CAACC,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;IAC3B,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,oBACElB,OAAA,CAAAE,SAAA;IAAAiB,QAAA,gBACEnB,OAAA,CAACL,SAAS;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACbvB,OAAA;MAAQwB,SAAS,EAAC,KAAK;MAAAL,QAAA,EAAC;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eACxDvB,OAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACNvB,OAAA,CAACJ,UAAU;MAACW,EAAE,EAAEA;IAAG;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACtBvB,OAAA,CAACH,OAAO;MAACW,KAAK,EAAEA;IAAM;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACzBvB,OAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,EACLd,KAAK,iBAAIT,OAAA,CAACF,YAAY;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA,gBAEzB;AAEP;AAACjB,EAAA,CArCQD,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AAuCZ,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}